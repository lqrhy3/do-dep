services:
  api:
    build:
      context: .
      dockerfile: services/api/Dockerfile
    env_file: .env
    restart: unless-stopped

  bot:
    build:
      context: .
      dockerfile: services/bot/Dockerfile
    env_file: .env
    restart: unless-stopped

  refill-worker:
    build:
      context: .
      dockerfile: services/api/Dockerfile
    command: uv run --package api python -m app.workers.refill
    env_file: .env
    depends_on: [ db ]
    restart: always

  db:
    image: postgres:17
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./db_data:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    restart: unless-stoppedworke

  caddy:
    image: caddy:2
    restart: unless-stopped
    ports: [ "80:80", "443:443" ]
    volumes:
      - ./infra/Caddyfile:/etc/caddy/Caddyfile:ro
      - ./web:/srv:ro
      - caddy_data:/data
      - caddy_config:/config
    environment:
      - EMAIL=${ACME_EMAIL}
    depends_on:
      - api

  adminer:
    image: adminer
    restart: unless-stopped
    ports: ["8580:8080"]
    depends_on: [db]

volumes:
  caddy_data:
  caddy_config: